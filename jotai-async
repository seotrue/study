import React, { Suspense } from "react";
import { Provider, atom, useAtom } from "jotai";

const postId = atom(1);
const postData = atom(async (get) => {
  const id = get(postId);
  const response = await fetch(
    `https://hacker-news.firebaseio.com/v0/item/${id}.json`
  );
  const data = await response.json();
  return data;
});

const PostId = () => {
  const [id, setId] = useAtom(postId);
  const next = () => setId((x) => x + 1);
  return (
    <div>
      id: {id} <button onClick={next}>Next</button>
    </div>
  );
};

const PostTitle = () => {
  const [data] = useAtom(postData);
  return (
    <div>
      <h1>{data.title}</h1>
      <a href={data.url}>{data.url}</a>
      <p>{data.text}</p>
    </div>
  );
};

const App = () => (
  <Provider>
    <PostId />
    <Suspense fallback="Loading...">
      <PostTitle />
    </Suspense>
  </Provider>
);

export default App;


/*
* 참고: https://devblog.kakaostyle.com/ko/2022-01-13-2-jotai-recipe/
https://zih0.tistory.com/27?category=890112

*/


const baseReplyCommentListAtom = atomFamily(() => atom(null));

const replyCommentListAtom = atomFamily((comment_id) => atom(async (get) => {
  const overwritten = get(baseReplyCommentListAtom(commnet_id));
  if (overwritten) return overwritten;
  const result = await fakeFetchReplyCommentList(comment_id);
  return result.data;
}, (get, set, update) => {
  set(baseReplyCommentListAtom(commnet_id), update)
}));

const postReplyComment  = atom(null, async (get, set, { comment_id, new_comment }) => {
  let prev = get(baseReplyCommnetListAtom(comment_id));
  if (!prev) {
    prev = (await fakeFetchReplyCommentList(comment_id)).data;
  }
  const result = await fakeCreateReplyComment(comment_id, new_comment);
  set(baseReplyCommentListAtom(comment_id), [
    result.data,
    ...prev),
  ]);
});
