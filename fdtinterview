오늘은 React에 내장되어있는 lazy를 사용해 볼 것이다.
React.lazy는 코드분할을 하게 해준다 => 성느 ㅇ향상
사용자가 필요하지 않는 코드를 불러오지 않게 하며 앱의 초기화 로등에 필요한 비용을 줄여줌



 





[청크 에러]
모종의 이유(캐시되었거나, 이전 버전에서 창을 닫지 않은 상태 등)로

이전 버전의 main.js를 사용하는 클라이언트는 여전히 A,B,C 청크를 로드하려 한다.


원인: 웹팩 설정을 따로 안하게 되면 기본적으로 js파일들이 청크파일로 나눠어지면서 새로운 해시값을 부여받음

배포시 서버에는 위와 같은 이유로 새로운 파일(파일병이 변경되어)들이 배포되어 잇는 상태
이상태에서 우리 새로고침을 하지 앟는 사용자들은 이전 파일명을 서버에 요청
청크 파일로 나누어 페이지 이동 등등 
해당파일이 필요할때 동적으로 요청
그러나 새로고침을 하지 않아 이전 파일 명으로 서버에 요청

검토:




 Error Boundary:


출처: https://satisfactoryplace.tistory.com/194 [만족]
참고
https://velog.io/@ansrjsdn/React.lazy-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0




점진적 성능: 많은 테스트를 통해 말그대로 기능을 점진적 향항 기초부터 탄탄히 
 vs 우아한 성능 : 최신기술을 기반 해서 오래된 기술를 하기위해 유사한기능을 만들어 동작
->  js를 지원하지 않는 기기를 위해 <noscript> 태그를 사용하여 사용자에게 "javascript가 지원되는 브라우저를 사용해 주세요!" 와 같은 알람을 띄워주는 것

seo:
검색엔진 최적화
검색을 통해 웹사이트에 연결하다록 돕는 최적화 프로세스
타이틀 메타 태그: 페이지 정보 미리보기 키워드

doctype이란
문서형식을 정의해 주는것
html이 어떤 버전으로 작성되엇는지 미리 선언해서 웹브러우자가 올바로 표시할수 잇도록 해주는것
문서의 렌더링 모드를 설정, 유효성 검사에 사용될 기준을 정의

html5 
기존 텍스트와 하이퍼링크만 표시하던 html 멀티미디어등 다양한 애플리케이션까지 표현

data 속성
특정하 ㄴ데이터를 돔 요서에 저장해두기 위함

다국어 처리
encoding 방식과 문서에서 주로 사용하는 언어 설정을 해주는 것은 필수다

html5 의 구성은 크게 4가지로 구분된다고 생각한다.

시멘틱 마크업
미디어 핸들링을 위한 내장 플렛폼
application API
오프라인 핸들러



<script>: 스크립트를 만나면 스크립트를 다운, 파싱, 실행 할때까지 문서 파싱 중단
<script async>: 돔 도작하지 않구 스크립트 의존성이 없는 코드에만 사용 하며 문서를 파싱하는 동안 스크립트를 만나면 문서 파싱과 함께 스크립트 
다운이 되고 다운이 완료되면 즉시 스크립트 실행 실행하는동안 문서 파싱을 멈춤
< script defer>: 스크립트 만나면 다운이 되지만 문서파싱을 멈추지안ㄹ고 끝까지 수행후 실행 => 바디 태그 밑에 스크립트 넣는거와 비슷한 효과


CSS<link>를 <head></head>사이에 쓰는 것과 JS<script>를 <body></body>뒤에 사용하는 것은 좋은 사용법일까요?
 어디에 배치하는 게 좋을까요?

css를 <head>태그 사이에 넣으면 사이트 ux 최적화에 도움->
웹사이트 로딩 시 html css 가 동시에 팡싱 
스타일이 없는 내용이 잠깐 보이닌 현상 ->
스타일이 없는 내용이 잠깐 보이는 현상 (flashes of unstyled content: FOUC) 방지할 수 있다.


src 속성은 사용자의 디스플레이 사양에 따라 다른 해상도의 이미지를 제공 




익명함수를 사용 이유
기명함수와 익명함수는 선언되는 시점이 완전히 다름
어떤 선언함수보다 익명 함수가 무조건 늦게 실행
익명함수는 브라오저 런타임에 동적으로 서언되는 함수 


변경 불가능한 값(immutable value)이다.
